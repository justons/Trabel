1、linux中的C
locate stdio.h 查看头文件路径
locate mysql/include 查看头文件包路径
mysql.h头文件路径/usr/include/mysql
编译源文件gcc -I/usr/include/mysql mysql.c -lmysqlclient -o mysqlt
/usr/include 头文件路径，主要包括操作系统级的头文件，/usr/local/include主要包括第三方库
#include<stdio.h>引用标准库，#include“myllib.h”引用本地动态库，如果本地没有再去标准库查找，如果本地动态库也用<>进行声明，编译器会自动先去标准库查找该库，导致编译报错。如果需要共享自定义的本地库，可以将头文件放在/usr/local/include路径下，然后即通过标准库格式头文件进行引用，#include<mylib.h>;也可以放在其他目录中，然后通过绝对路径引用，#include“/orther/header_file/mylibh”；也可以告诉编译器第三方库的位置，gcc -I/other/header_file code.c -o code_out,-I参数告诉编译器还有另一个地方可以找到头文件中的库
//注释在标准C中是不合法的，有些编译器可能不支持，因此就会成为不可移植的程序，最好用/*注释*/
2.语法
switch语句中的控制表达式必须是由圆括号扩起来的整数表达式，C把字符也当成整数处理，因此可以在switch语句中对字符进行判定，但不能对浮点数和字符串进行判定。
在C中预定义了一些有用的宏，这些宏主要是提供当前编译的信息。如下：
__LINE__	被编译的文件的行数	整形常量
__FILE__	被编译的文件的名字	字符串字面量
__DATE__	编译的日期	字符串字面量，格式Mmm dd yyyy
__TIME__	编译的时间	字符串字面量，格式hh:mm:ss
__STDC__	编译器是否接受标准C	整形常量1或0
3.输入输出
char test[5];
scanf("%4s",test)#其中%4s指定读入4个字符，否则会导致内存溢出。把字符读入数组是，scanf和gets都无法检测何时填满数组，因此他们可能越过数组的边界存储字符，从而导致程序行为异常。%ns代替%s可以使scanf函数更安全，然而gets函数天生就是不安全的，替代方案是用fgets函数。
gets(test,sizeof(test),stdin)#而gets需要指定完全长度，结尾会自动包含\0结束符
stdio.h提供了三种标准流，stdin标准输入默认为键盘，可以用<将标准输入重定向为文件，同样标准输出stdout默认为显示屏，可以用>讲标准输出重定向到文件，可以使用2>将标准错误stderr重定向到文件
puts(str)必须有一个字符串作为入参，打印完str后puts函数会添加一个额外的换行符。
fprintf(stdout,"%s",msg)//输出到标准输出
fprintf(stderr,"%s",msg)//输出到错误输出
fscanf(stdin,"%s %s %s[^\n]",fname,sname,lname)//从标准输入读入,[^\n]表示读至本行的换行符为止，在寻找数或者下一个数的起始位置时，scanf会忽略空白字符(空格符、横向和纵向制表符、换页符和换行符)，这样的结果是可以把数字放在单独一行或分散在几行输入。在处理格式串中普通字符时，scanf函数采取的动作依赖于这个字符是否为空白字符，当在格式串中遇到一个或多个空白字符时，scanf函数从输入中重复读空白字符知道遇到一个非空白字符为止，格式串中空白字符的数量无关紧要，格式串中一个空白字符可以和输入中任意数两个空白字符匹配；当在格式串中遇到一个非空白字符时，scanf会把它与下一个输入字符进行比较，如果两个字符不匹配，那么scanf会把不匹配的字符放回输入中，异常退出。例如“%d/%d“与”[空格]5/[空格]96“是匹配的，但与”[空格]5[空格]/[空格]96“就不能匹配了，因为读完5之后格式串中下个字符为非空白字符“/”，因此需要与输入中一个”/“相匹配，而此时输入中仍为空格字符，因此无法匹配，异常退出。
在main函数中exit(0)和return 0二者完全等价，都终止程序运行并且向操作系统返回0值。

4.字符串和字符数组
从本质上而言，C语言会把字符串字面量作为字符数组来处理，编译器会为长度为n的字符串字面量分配长度为n+1的空间，用来存储字符串字面量和ACCII字符集中第一个字符\0。字符常量通常是用单引号扩起来的字符，然而，一些特殊的符号是无法采用这种书写方式的，比如换行符，因为它是不可见的(无法打印的)，或者是无法从键盘输入的，因此，为了使程序可以处理字符集中的每一个字符，C语言提供了特殊的符号转义序列，包括字符转义序列和数字转义序列来对特殊字符进行转义，\0就是对不可见的ACCIIma码的第一个字符进行转义。
当声明用于存放字符串的字符数组时，始终要保证数组的长度比字符串的长度多一个字符，而且C函数库中的函数假设字符串都是以空字符\0结束的，因此如果字符数组中没有给空字符预留位置，可能会导致程序运行时出现不可预知的结果。
C语言中字符串后会自动带有一个结束符‘\0’，strlen遇到\0结束符返回字符串长度。字符数组其实和其他数组没什么区别，只是保存的数据类型是字符类型（char）,它没有强制要求最后的元素是否是'\0'。字符串实质上一块内存，其中保存的值是常量，常量其实就是不能采用程序对内存中的值进行修改。因此字符数组是可变的，字符串则是不可变的序列。
读入字符串时，scanf会跳过空白字符，把读入的字符存储到str中，知道遇到空白字符位置，scanf会在字符串末尾存储一个空白字符。用scanf读入字符串永远不会包含空白字符，制表符、换行符、空格符等会使scanf函数对字符串的读入停止。为了每次读入一整行输入，可以使用gets()，gets也会把读入的字符放到数组中，然后存储一个空字符。然而，gets不会跳过字符串之前的空白字符，且持续读到换行符才停止，同时gets会忽略掉最后读入的换行符，用空字符代替。
//字符串的定义
 char *str = "string is a constant";
//字符数组的定义
 char strarray[] = {'s','t','r','i','n','g',' ','i','s',' ','a','','c','o','n','s','t','a','n','t','\0'};
//或者
 char strarray[] = "string is a constant";
 char strarray[] = {"string is a constant"};
需要注意的是sizeof(str)只会返回指针的长度，而不是字符串的长度，针对指针求字符串长度用strlen比较安全。在函数定义中
void stack_deck(char cards[]);
void stack_deck(char *cards);
两者是等价的，cards都是指向字符串的指针
字符串函数string.h
strchr()	Find the location of a character inside
a string.
strcmp()	Compare two strings.
strstr()	Find the location of a string inside another string.
strcpy()	Copy one string to another.
strlen()	Find the length of a string.
strcat()	Concatenate two strings.
strdup()	字符串拷贝，在heap中开辟一块内存放入拷贝的字符串，用完后需要释放内存
直接尝试对字符串进行复制或比较操作会失败，例如
char str1[10],str2[10];
str1="abc";/*错误*/
str2=str;/*错误*/
利用=运算符将字符串复制到字符数组是不可能的，C语言将其解释为一个指针与另一个指针之间的(非法的)复制运算。但是使用=初始化字符数组是合法的，以为在申明中=不是赋值运算符即
char str1[10]="abc";/*合法，等同于 char str1[10]={'a','b','c','\0'};*/
字符串操作通常可以通过string.h中的函数实现，char*strcpy(char *s1,const char *s2);该函数把字符串s2复制给字符串s1，准确的说是把s2指向的字符串复制到s1指向的数值中，返回str2的指针，strcpy函数的存在弥补了赋值运算符不能复制字符串的不足。strcpy(str1,"abc");或strcpy(str1，str2);都是合法的，但是strcpy函数无法检查str1指向的字符串的大小是否真的适合str2指向的数组，strcpy会一直复制到str1的第一个空字符为止，所以它有可能会越过str2指向的数组的边界继续复制，无论原来存放在数组后面的内存中是什么都将被覆盖，因此有可能带来不可预期的结果。尽管会慢一些，strncpy函数提供了一种更安全的字符串复制方法。
strlen返回字符串中第一个空字符前的字符个数，但不包括第一个空字符。当以数组作为strlen函数的实际参数时，strlen不会返回数组本身的长度，而是返回存储在数组中的字符串的长度。
5.指针
指向字符串的指针char ×p，指向字符串数组的指针 char×× p
函数名即指向函数的指针，自定义指向函数的指针 int (*match)(char *s),该函数的返回类型为int，入参为字符串指针，match为自己定义的函数指正变量名。函数指针数组void (*replies[])(int)，数组名为replies，该数组中函数无返回值，入参为int型，其调用形式为(*replies[0])(5)或(replies[0])(5);
6.复合数据结构
当t为结构体指针时，（×t）.age等同与t->age,也就是说如果结构体引用其子域可用t.age,结构体指针应用其子域可用t->age以便于书写和阅读。如果结构体中的域较多，而初始化时只需要部分赋值，可使用命名初始化，即
typedef struct {
const char *color;
int gears;
int height;
} bike;
bike b = {.height=17, .gears=21};//这样即简单有易于阅读
7.内存管理
C中局部变量保存在stack中，用完即释放，字符串等不可变变量保存在heap中，长期存放，全局变量保存在globals中，常量保存在hconstants中，
动态内存管理使程序可以在运行时创建所需内存，malloc()即memory allocation从heap中申请一块内存，需要用free()释放
8.makefile
makefile文件包含构建程序的必要信息，不仅列出了作为程序部分的文件，而且还描述了文件之间的依赖性，而且可以部分编译，避免重新构建部分文件后需要重新编译所有源文件而浪费大量时间。例如如下文件
fmt：fmt.o word.o line.o 
	gcc -o fmt fmt.o word.o line.o
fmt.o:fmt.c word.h line.h
	gcc -c fmt.c
word.o:word.c word.h
	gcc -c word.c
line.o:line.c line.h
	gcc -c line.c
四组指令中每组第一行给出了目标文件，跟在后边的是它所依赖的文件，如果以为其中一个所依赖的文件的变化而使目标必须重新构建，那么每组的第二行是用来执行的命令。makefile文件创建好后，就可以使用make工具来构建程序了，通过检查每个文件的更新时间，make可以确定那个文件是过期的。
8.标准库
<assert.h>诊断
<ctype.h>字符处理
<errno.h>错误处理
<float.h>浮点数处理
<limits.h>整形的大小
<local.h>本地化
<math.h>数学计算
<setjmp.h>非本地跳转
<signal.h>信号处理
<stdarg.h>可变实际参数
<stddef.h>常用定义,提供了常用的类型和宏的定义，但未申明任何函数。定义的类型如size_t，运算符sizeof的返回值类型；定义的宏如NULL，用来表示空指针，但NULL在其他标准库中基本也都有定义
<stdio.h>输入输出
<stdlib.h>常用实用函数
<string.h>字符串处理
<time.h>日期和时间处理
<>











































